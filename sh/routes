#!/bin/sh
uid=$1
scripts=$2
# setcap 'cap_net_bind_service=+ep' `realpath /usr/bin/ruby`

# default policy
iptables  -P INPUT DROP
ip6tables -P INPUT DROP
iptables  -P OUTPUT DROP
ip6tables -P OUTPUT DROP
# allow localhost
iptables  -A INPUT -i lo -j ACCEPT
ip6tables -A INPUT -i lo -j ACCEPT
iptables  -A OUTPUT -o lo -j ACCEPT
ip6tables -A OUTPUT -o lo -j ACCEPT
# allow ICMP
iptables  -A INPUT -p icmp -j ACCEPT
ip6tables -A INPUT -p icmp -j ACCEPT
iptables  -A OUTPUT -p icmp -j ACCEPT
ip6tables -A OUTPUT -p icmp -j ACCEPT
# use TCP until QUIC/HTTPv3 support exists
iptables  -A OUTPUT -p udp --dport 80 -j DROP
ip6tables -A OUTPUT -p udp --dport 80 -j DROP
iptables  -A OUTPUT -p udp --dport 443 -j DROP
ip6tables -A OUTPUT -p udp --dport 443 -j DROP

# send web traffic through proxy
iptables  -t nat -A OUTPUT -p tcp --dport  80 -j REDIRECT --to-ports 8000 -m owner ! --uid-owner $uid
ip6tables -t nat -A OUTPUT -p tcp --dport  80 -j REDIRECT --to-ports 8000 -m owner ! --uid-owner $uid
iptables  -t nat -A OUTPUT -p tcp --dport 443 -j REDIRECT --to-ports 8080 -m owner ! --uid-owner $uid
ip6tables -t nat -A OUTPUT -p tcp --dport 443 -j REDIRECT --to-ports 8080 -m owner ! --uid-owner $uid

sh $scripts/open_port    22 # SSH
sh $scripts/open_port    43 # WHOIS
sh $scripts/open_port    53 # DNS
sh $scripts/open_port    67 # DHCP
sh $scripts/open_port    68 # DHCP
sh $scripts/open_port    80 # HTTP
sh $scripts/open_port   443 # HTTPS
sh $scripts/open_port  6789 # IRC
sh $scripts/open_port  8000 # HTTP
sh $scripts/open_port  8022 # SSH
sh $scripts/open_port  8080 # HTTPS transparent proxy
sh $scripts/open_port  8888 # HTTPS explicit proxy
sh $scripts/open_port 60001 # Mosh
sh $scripts/open_port 60002
sh $scripts/open_port 60003
